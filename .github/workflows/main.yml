name: Build Pillager

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-2022

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1

    - name: Install NuGet Packages
      run: nuget restore Pillager.sln
      
    - name: Build solution
      run: msbuild -nologo -v:m -p:Configuration=${{ matrix.configuration }} Pillager.sln
      
    - name: Patch Runtime Version to v4.0.30319
      shell: pwsh
      run: |
        $exePath = "./Pillager/bin/Release/Pillager.exe"
        $ilPath = "./Pillager/bin/Release/Pillager.il"
        $newIlPath = "./Pillager/bin/Release/Pillager_new.il"
        $resPath = "./Pillager/bin/Release/Pillager.res"

        # Setup Visual Studio Developer Environment
        $vswhere = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe"
        $vsPath = & $vswhere -latest -property installationPath
        Import-Module "$vsPath\Common7\Tools\Microsoft.VisualStudio.DevShell.dll"
        Enter-VsDevShell -VsInstallPath $vsPath -SkipAutomaticLocation

        echo "Disassembling $exePath..."
        ildasm $exePath /out=$ilPath

        echo "Patching IL file to target .NET Runtime v4.0.30319..."
        (Get-Content $ilPath) -replace 'RuntimeVersion "v2.0.50727"', 'RuntimeVersion "v4.0.30319"' | Set-Content $newIlPath

        echo "Reassembling executable..."
        if (Test-Path $resPath) {
          ilasm $newIlPath /output=$exePath /resource=$resPath /quiet
        } else {
          ilasm $newIlPath /output=$exePath /quiet
        }
        echo "Patching complete."

    - name: Delete old tag and release
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
        delete_release: true
        tag_name: AutoBuild
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: AutoBuild
        release_name: AutoBuild
        body: "Automated build"
        draft: false
        prerelease: false
        
    - name: Upload Release Exe
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pillager/bin/Release/Pillager.exe
        asset_name: Pillager.exe
        asset_content_type: application/vnd.microsoft.portable-executable
        